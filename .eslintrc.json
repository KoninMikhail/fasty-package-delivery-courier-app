{
  "root": true,
  "env": {
    "browser": true,
    "node": true,
    "es2021": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.eslint.json",
    "tsconfigRootDir": "./"
  },
  "plugins": [
    "react-prefer-function-component",
    "unused-imports"
  ],
  "extends": [
    "eslint:all",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:react/all",
    "@feature-sliced",
    "plugin:vitest/recommended",
    "plugin:jsx-a11y/recommended",
    "airbnb",
    "airbnb-typescript",
    "airbnb/hooks",
    "plugin:react/jsx-runtime",
    "plugin:unicorn/all",
    "plugin:react-prefer-function-component/recommended",
    "plugin:prettier/recommended",
    "prettier"
  ],
  "rules": {
    // Common
    "no-dupe-else-if": "error",
    "no-promise-executor-return": "error",
    "no-unreachable-loop": "error",
    "no-useless-backreference": "error",
    "require-atomic-updates": "error",
    "default-case-last": "error",
    "grouped-accessor-pairs": "error",
    "no-constructor-return": "error",
    "no-implicit-coercion": "error",
    "prefer-regex-literals": "error",
    "capitalized-comments": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-void": "off",
    // @typescript-eslint
    "@typescript-eslint/padding-line-between-statements": "off",
    "@typescript-eslint/prefer-enum-initializers": "off",
    "@typescript-eslint/prefer-readonly-parameter-types": "off",
    "@typescript-eslint/prefer-regexp-exec": "off",
    "@typescript-eslint/no-magic-numbers": "off",
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/init-declarations": "off",
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      {
        "ignoreArrowShorthand": true
      }
    ],
    "@typescript-eslint/non-nullable-type-assertion-style": "off",
    "@typescript-eslint/strict-boolean-expressions": "off",
    "@typescript-eslint/no-implicit-any-catch": "off",
    "@typescript-eslint/member-ordering": "off",
    "@typescript-eslint/prefer-includes": "off",
    "react/require-default-props": "off",
    "@typescript-eslint/no-restricted-imports": "off",
    // import/export
    "import/no-deprecated": "error",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": true
      }
    ],
    "react/no-did-update-set-state": "off",
    "react/no-find-dom-node": "off",
    "react/no-is-mounted": "off",
    "react/no-redundant-should-component-update": "off",
    "react/no-render-return-value": "off",
    "react/no-string-refs": "off",
    "react/no-this-in-sfc": "off",
    "react/no-will-update-set-state": "off",
    "react/prefer-es6-class": "off",
    "react/no-unused-state": "off",
    "react/prefer-stateless-function": "off",
    "react/require-render-return": "off",
    "react/sort-comp": "off",
    "react/state-in-constructor": "off",
    "react/static-property-placement": "off",
    "react/boolean-prop-naming": [
      "error",
      {
        "validateNested": true
      }
    ],
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "react/no-unstable-nested-components": "error",
    "react/jsx-handler-names": [
      "error",
      {
        "eventHandlerPrefix": "on",
        "eventHandlerPropPrefix": "on",
        "checkLocalVariables": true,
        "checkInlineFunction": true
      }
    ],
    "react/jsx-key": "error",
    "react/jsx-no-bind": [
      "error",
      {
        "ignoreRefs": false,
        "allowArrowFunctions": true,
        "allowFunctions": true,
        "allowBind": false,
        "ignoreDOMComponents": false
      }
    ],
    "react/jsx-no-constructed-context-values": "error",
    "react/jsx-no-script-url": "error",
    "react/jsx-no-useless-fragment": "error",
    "unicorn/filename-case": [
      "error",
      {
        "cases": {
          "kebabCase": true,
          "pascalCase": true,
          "camelCase": true
        }
      }
    ],
    "unicorn/no-nested-ternary": [
      "error"
    ],
    "unicorn/no-keyword-prefix": "off",
    "unicorn/no-null": "off",
    // Code formatting with prettier
    "prettier/prettier": [
      "error",
      {
        "singleQuote": true,
        "endOfLine": "auto",
        "tabWidth": 4
      }
    ],
    // No unused imports, vars
    "no-unused-vars": "off",
    // or "@typescript-eslint/no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    // Disabled
    "react/prop-types": "off",
    "@typescript-eslint/no-redundant-type-constituents": "off",
    "import/prefer-default-export": "off"
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true
      },
      "node": {
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx"
        ]
      }
    }
  },
  "overrides": [
    {
      "files": [
        "*.js"
      ],
      "extends": [
        "plugin:@typescript-eslint/disable-type-checked"
      ]
    },
    {
      "files": [
        "src/**/*.ts?(x)"
      ],
      "parserOptions": {
        "project": [
          "./tsconfig.json"
        ]
      }
    },
    {
      "files": [
        "vite.config.mts",
        "cypress.config.ts",
        "tailwind.config.ts"
      ],
      "parserOptions": {
        "project": [
          "./tsconfig.node.json"
        ]
      }
    },
    {
      "files": [
        "**/__tests__/**/*.ts?(x)",
        "src/**/__tests__/*",
        "src/**/**/*.{spec,test}.{js,jsx,ts,tsx}"
      ],
      "plugins": [
        "vitest"
      ],
      "extends": [
        "plugin:vitest/recommended",
        "plugin:testing-library/react"
      ],
      "rules": {
        "testing-library/no-await-sync-events": [
          "error",
          {
            "eventModules": [
              "fire-event"
            ]
          }
        ],
        "testing-library/no-manual-cleanup": "error",
        "testing-library/prefer-explicit-assert": "error",
        "testing-library/prefer-user-event": "error"
      }
    }
  ]
}
